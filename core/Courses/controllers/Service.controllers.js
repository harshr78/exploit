const { Where } = require("sequelize");
const db = require("../../Connection/index.models")

let service = db.service;

exports.create = (title, response) => {
  const serviceObject = {
    title: title,
  }
  service.create(serviceObject).then(data => {
    return response.send(data);
  }).catch(err => {
    response.statusCode = 406;
    return response.send("something went wrong");
  });
};

// Retrieve all or filter data from the database.
exports.findAll = async (condition = null) => {
  return new Promise((resolve, reject) => {
    service.findAll({
      where: condition, include: [{
        model: db.Review
      }]
    })
      .then(data => {
        resolve(data)
      })
      .catch(err => {
        reject("something went wrong");
      })
  })
};

// Find a single service with an condition
exports.findOne = (condition, res) => {
  return new Promise((resolve, reject) => {
    service.findOne(
      {
        where: condition,
        include: [{
          model: db.Review
        }]
      }
    )
      .then(data => {
        if (data) {
          resolve(data);
        } else {
          reject(`Item you are looking for not found`);
        }
      })
      .catch(err => {
        console.log(err);
        reject(`something went wrong`);
      });
  })
};

// Update a service by the condition in the request
exports.update = (body, condition) => {
  service.update(body, {
    where: { condition }
  })
    .then(num => {
      if (num == 1) {
        return "service was updated successfully."

      } else {
        return `Cannot update service with id=${id}. Maybe service was not found or req.body is empty!`

      }
    })
    .catch(err => {
      return "Error updating service with id=" + id
    });
};

// Delete a service with the specified id in the request
exports.delete = (condition) => {
  service.destroy({
    where: { id: id }
  })
    .then(num => {
      if (num == 1) {
        return "service was deleted successfully!"

      } else {
        return `Cannot delete service with id=${id}. Maybe service was not found!`
      }
    })
    .catch(err => {
      return `Could not delete service with id=${id} Contact Administartion`;
    });
};

// Delete all data from the database.
exports.deleteAll = (condition = null) => {
  service.destroy({
    where: { condition },
    truncate: false
  })
    .then(nums => {
      return `${nums} services were deleted successfully!`;
    })
    .catch(err => {
      return (err.message || "Some error occurred while removing all services.");
    });
};