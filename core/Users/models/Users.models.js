const bcrypt = require('bcrypt');



module.exports = (sequelize, Sequelize) => {
    const User = sequelize.define("users", {
        email: {
            type: Sequelize.TEXT(),
            allowNull: false,
        },
        password: {
            type: Sequelize.STRING(),
            allowNull: false,

        },

        name: {
            type: Sequelize.STRING,
            allowNull: false
        },
        email: {
            type: Sequelize.STRING,
            allowNull: true
        },
        phone: {
            type: Sequelize.STRING,
            allowNull: false,
            unique: true
        },
        is_superuser: {
            type: Sequelize.BOOLEAN(),
            defaultValue: false,
        }


    }, {
        hooks: {
            beforeCreate: async (user) => {
                if (user.password) {
                    const salt = await bcrypt.genSaltSync(10, 'a');
                    user.password = bcrypt.hashSync(user.password, salt);
                }
            },
            beforeUpdate: async (user) => {
                if (user.password) {
                    const salt = await bcrypt.genSaltSync(10, 'a');
                    user.password = bcrypt.hashSync(user.password, salt);
                }
            }
        },
        instanceMethods: {
            validPassword: (password) => {
                return bcrypt.compareSync(password, this.password);
            }
        },
        

    });
    User.associate = models => {
        User.hasMany(models.Review, {
            onDelete: "cascade",
        })
    }
    return User;
};