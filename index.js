const express = require("express");
const cors = require("cors");
const db = require("./core/Connection/index.models")
const AdminJS = require('adminjs')
const AdminJSExpress = require('@adminjs/express')
const AdminJSSequelize = require('@adminjs/sequelize')

const app = express();

var corsOptions = {
  origin: "https://academytechvanto.herokuapp.com"
};


app.use(cors(corsOptions));




db.sequelize.sync();


AdminJS.registerAdapter(AdminJSSequelize)

const {
  after: uploadAfterHook,
  before: uploadBeforeHook,
} = require('./admin/hooks/CategoryImageUpload.hooks.js');

const {
  after: instructorAfterHook,
  before: instructorBeforeHook,
} = require('./admin/hooks/InstructorImageUpload.hooks.js');

const {
  after: serviceFileUploadAfterHook,
  before: serviceFileUploadBeforeHook,
} = require('./admin/hooks/ServiceUpload.hooks.js');


const locale = {
  translations: {
    labels: {
      // change Heading for Login
      loginWelcome: 'Techvanto',
    },
    messages: {
      loginWelcome: 'Admin Panel',
    },
  },
};

const adminJs = new AdminJS({
  databases: [db],
  rootPath: '/admin',
  logoutPath: '/admin/exit',
  loginPath: '/admin/sign-in',
  resources: [
    {
      resource: db.Instructor,
      options: {
        parent: {
          name: "User",
        },
        properties: {
          pic: {
            components: {
              list: AdminJS.bundle("./admin/components/ImageShowList.tsx"),
              show: AdminJS.bundle("./admin/components/ImageShowList.tsx"),
              edit: AdminJS.bundle("./admin/components/ImageNewEdit.tsx"),
            }
          }
        },
        actions: {
          new: {
            after: async (response, request, context) => {
              return instructorAfterHook(response, request, context);
            },
            before: async (request, context) => {
              return instructorBeforeHook(request, context);
            },
          },
          edit: {
            after: async (response, request, context) => {
              return instructorAfterHook(response, request, context);
            },
            before: async (request, context) => {
              return instructorBeforeHook(request, context);
            },
          },
        }
      }
    },
    {
      resource: db.sectiontype,
      options: {
        parent: {
          name: "Sections",
        },
      }
    },
    {
      resource: db.sectioncategory,
      options: {
        parent: {
          name: "Sections",
        },
        properties: {
          pic: {
            components: {
              list: AdminJS.bundle("./admin/components/ImageShowList.tsx"),
              show: AdminJS.bundle("./admin/components/ImageShowList.tsx"),
              edit: AdminJS.bundle("./admin/components/ImageNewEdit.tsx"),
            }
          }
        },
        actions: {
          new: {
            after: async (response, request, context) => {
              return uploadAfterHook(response, request, context);
            },
            before: async (request, context) => {
              return uploadBeforeHook(request, context);
            },
          },
          edit: {
            after: async (response, request, context) => {
              return uploadAfterHook(response, request, context);
            },
            before: async (request, context) => {
              return uploadBeforeHook(request, context);
            },
          },
        }
      }
    }, {
      resource: db.sectionsubcategory,
      options: {
        parent: {
          name: "Sections",
        }
      }
    }, {
      resource: db.service,
      options: {
        parent: "Products",
        properties: {
          overview: {
            type: "richtext"
          },
          headerpic: {
            components: {
              list: AdminJS.bundle("./admin/components/ImageShowList.tsx"),
              show: AdminJS.bundle("./admin/components/ImageShowList.tsx"),
              edit: AdminJS.bundle("./admin/components/ImageNewEdit.tsx"),
            }
          },
          file: {
            components: {
              list: AdminJS.bundle("./admin/components/ImageShowList.tsx"),
              show: AdminJS.bundle("./admin/components/ImageShowList.tsx"),
              edit: AdminJS.bundle("./admin/components/ImageNewEdit.tsx"),
            }
          },
          thumbnail: {
            components: {
              list: AdminJS.bundle("./admin/components/ImageShowList.tsx"),
              show: AdminJS.bundle("./admin/components/ImageShowList.tsx"),
              edit: AdminJS.bundle("./admin/components/ImageNewEdit.tsx"),
            }
          }
        },
        actions: {
          new: {
            after: async (response, request, context) => {
              return serviceFileUploadAfterHook(response, request, context);
            },
            before: async (request, context) => {
              return serviceFileUploadBeforeHook(request, context);
            },
          },
          edit: {
            after: async (response, request, context) => {
              return serviceFileUploadAfterHook(response, request, context);
            },
            before: async (request, context) => {
              return serviceFileUploadBeforeHook(request, context);
            },
          },
        }
      }
    }, {
      resource: db.curriculum,
      options: {
        parent: "Products",
      }
    },
    {
      resource: db.curriculumModule,
      options: {
        parent: "Products",
      }
    },
    {
      resource: db.curriculumSubModule,
      options: {
        parent: "Products",
      }
    },
    {
      resource: db.WorkshopType,
      options: {
        parent: "Workshops",
      }
    },
    {
      resource: db.WorkshopTopic,
      options: {
        parent: "Workshops",
      }
    },
    {
      resource: db.Workshop,
      options: {
        parent: "Workshops",
        properties: {
          overview: {
            type: "richtext"
          },
          instructor: {
            type: "richtext"
          },
          pic: {
            components: {
              list: AdminJS.bundle("./admin/components/ImageShowList.tsx"),
              show: AdminJS.bundle("./admin/components/ImageShowList.tsx"),
              edit: AdminJS.bundle("./admin/components/ImageNewEdit.tsx"),
            }
          },
        },
        actions: {
          new: {
            after: async (response, request, context) => {
              return uploadAfterHook(response, request, context);
            },
            before: async (request, context) => {
              return uploadBeforeHook(request, context);
            },
          },
          edit: {
            after: async (response, request, context) => {
              return uploadAfterHook(response, request, context);
            },
            before: async (request, context) => {
              return uploadBeforeHook(request, context);
            },
          },
        }
      }
    },


    {
      resource: db.Workshop_Curriculum,
      options: {
        parent: "Workshops",
      }
    },
    {
      resource: db.Workshop_Curriculum_Module,
      options: {
        parent: "Workshops",
      }
    },

    {
      resource: db.Webinar,
      options: {
        parent: "Webinar",
        properties: {
          overview: {
            type: "richtext"
          },
          instructor: {
            type: "richtext"
          },
          pic: {
            components: {
              list: AdminJS.bundle("./admin/components/ImageShowList.tsx"),
              show: AdminJS.bundle("./admin/components/ImageShowList.tsx"),
              edit: AdminJS.bundle("./admin/components/ImageNewEdit.tsx"),
            }
          },
        },
        actions: {
          new: {
            after: async (response, request, context) => {
              return uploadAfterHook(response, request, context);
            },
            before: async (request, context) => {
              return uploadBeforeHook(request, context);
            },
          },
          edit: {
            after: async (response, request, context) => {
              return uploadAfterHook(response, request, context);
            },
            before: async (request, context) => {
              return uploadBeforeHook(request, context);
            },
          },
        }
      }
    },
    {
      resource: db.WebinarDetailsAndBenefits,
      options: {
        parent: "Webinar"
      }
    },
    {
      resource: db.WebinarCurriculum,
      options: {
        parent: "Webinar"
      }
    },
    {
      resource: db.WebinarCurriculumModule,
      options: {
        parent: "Webinar"
      }
    },
    {
      resource: db.WebinarTopic,
      options: {
        parent: "Webinar"
      }
    },
    {
      resource: db.ClassProject,
      options: {
        parent: "Other Services",
        properties: {
          overview: {
            type: "richtext",
          }
        }
      }
    }




  ],
  dashboard: {
    handler: async () => {
      return { some: 'output' }
    },
    component: AdminJS.bundle('./admin/dashboard/Dashboard.jsx')
  },
  locale,
  branding: {
    logo: "https://techvantoacademy.com/images/logo.png",
    companyName: 'Techvanto',
    softwareBrothers: false,
  },
})

const ADMIN = {
  email: "admin@admin.com",
  password: "admin"
}

// const router = AdminJSExpress.buildRouter(adminJs)
const router = AdminJSExpress.buildAuthenticatedRouter(adminJs, {
  cookieName: process.env.ADMIN_COOKIE_NAME || 'techvanto-admin',
  cookiePassword: process.env.ADMIN_COOKIE_PASS || 'techvanto-admin-password',
  authenticate: async (email, password) => {
    if (email == ADMIN.email && password == ADMIN.password) {
      return ADMIN
    }
    else {
      return null
    }
  }
}, null, {
  resave: false,
  saveUninitialized: true,
});
app.use(adminJs.options.rootPath, router)
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

app.use(require("./core/Courses/views/Services.views"));
app.use(require("./core/Services/views/Webinar.views"));
app.use(require("./core/Services/views/Workshop.views"));
app.use(require("./core/Services/views/OtherServices.views"));
// parse requests of content-type - application/json
app.use(express.json());
// set port, listen for requests
const PORT = process.env.PORT || 8000;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}.`);
});