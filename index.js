const express = require("express");
const cors = require("cors");
const db = require("./core/Connection/index.models")
const AdminJS = require('adminjs')
const AdminJSExpress = require('@adminjs/express')
const AdminJSSequelize = require('@adminjs/sequelize')

const app = express();

var corsOptions = {
  origin: "http://localhost:3000"
};


app.use(cors(corsOptions));




db.sequelize.sync();


AdminJS.registerAdapter(AdminJSSequelize)

const {
  after: uploadAfterHook,
  before: uploadBeforeHook,
} = require('./admin/hooks/CategoryImageUpload.hooks.js');


const adminJs = new AdminJS({
  databases: [db],
  rootPath: '/admin',
  logoutPath: '/admin/exit',
  loginPath: '/admin/sign-in',
  resources: [{
    resource: db.sectiontype,
    options: {
      parent: {
        name: "Sections",
      },
    }
  },
  {
    resource: db.sectioncategory,
    options: {
      parent: {
        name: "Sections",
      },
      properties: {
        pic: {
          components: {
            edit: AdminJS.bundle("./admin/components/CategoryPhotoField.tsx"),
          }
        }
      },
      actions: {
        new: {
          after: async (response, request, context) => {
            return uploadAfterHook(response, request, context);
          },
          before: async (request, context) => {
            return uploadBeforeHook(request, context);
          },
        },
      }
    }
  }, {
    resource: db.sectionsubcategory,
    options: {
      parent: {
        name: "Sections",
      }
    }
  }, {
    resource: db.service,
    options: {
      parent: "Products",

      properties: {
        overview: {
          type: "richtext"
        }
      }
    }
  }, {
    resource: db.curriculum,
    options: {
      parent: "Products",
    }
  },
  {
    resource: db.curriculumModule,
    options: {
      parent: "Products",
    }
  },
  {
    resource: db.curriculumSubModule,
    options: {
      parent: "Products",
    }
  },],
  dashboard: {
    handler: async () => {
      return { some: 'output' }
    },
    component: AdminJS.bundle('./admin/dashboard/Dashboard.jsx')
  },

  branding: {
    logo: "http://www.w3.org/2000/svg",
    companyName: 'Techvanto',
  },
})

const ADMIN = {
  email: "admin@admin.com",
  password: "admin"
}

// const router = AdminJSExpress.buildRouter(adminJs)
const router = AdminJSExpress.buildAuthenticatedRouter(adminJs, {
  cookieName: process.env.ADMIN_COOKIE_NAME || 'techvanto-admin',
  cookiePassword: process.env.ADMIN_COOKIE_PASS || 'techvanto-admin-password',
  authenticate: async (email, password) => {
    if (email == ADMIN.email && password == ADMIN.password) {
      return ADMIN
    }
    else {
      return null
    }
  }
}, null, {
  resave: false,
  saveUninitialized: true,
});
app.use(adminJs.options.rootPath, router)
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

app.use(require("./core/Services/views/Services.views"))

// parse requests of content-type - application/json
app.use(express.json());
// set port, listen for requests
const PORT = process.env.PORT || 8000;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}.`);
});